---
# Values for Grafana helm chart loacated at the following URL
# https://github.com/grafana/helm-charts/tree/main/charts/grafana
- name: Deploy Grafana and included compoonents
  kubernetes.core.helm:
    name: grafana
    binary_path: /usr/local/bin/helm
    chart_ref: helm-local/grafana
    create_namespace: true
    release_namespace: '{{ monitoring_namespace }}'
    update_repo_cache: true
    wait: true
    values:
      adminUser: 'admin'
      adminPassword: 'Pass@word10'
      
      image:
        registry: '{{ monitoring_container_repo }}'
        repository: 'grafana/grafana'
        tag: '10.2.2'

      testFramework:
        enabled: false
        image:
          registry: '{{ monitoring_container_repo }}'
          repository: bats/bats
          tag: "v1.4.1"
        imagePullPolicy: IfNotPresent
        securityContext: {}

      # dns configuration for pod
      dnsPolicy: ~
      dnsConfig: {}
        # nameservers:
        #   - 8.8.8.8
        #   options:
        #   - name: ndots
        #     value: "2"
        #   - name: edns0

      securityContext:      
        runAsNonRoot: false
        runAsUser: 0
        runAsGroup: 0
        fsGroup: 0

      containerSecurityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        seccompProfile:
          type: RuntimeDefault

      createConfigmap: true
      
      extraConfigmapMounts:
        - name: ca-bundle-mount
          mountPath: /etc/ssl/certs/domain-ca.pem
          subPath: domain-ca.pem # (optional)
          configMap: ca-bundle
          readOnly: true
                  
      downloadDashboardsImage:
        registry: '{{ monitoring_container_repo }}'
        repository: 'curlimages/curl'
        tag: 7.85.0
  
      downloadDashboards:
        env: {}
        envFromSecret: ""
        resources: {}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          seccompProfile:
            type: RuntimeDefault
        envValueFrom: {}

      ingress:
        enabled: true
        ingressClassName: nginx
        annotations:
          kubernetes.io/ingress.class: nginx            
        hosts: 
          - '{{ monitoring_grafana_host }}'
        tls: 
          - secretName: grafana-cert
            hosts:
              - '{{ monitoring_grafana_host }}'

        resources: {}
          #  limits:
          #    cpu: 100m
          #    memory: 128Mi
          #  requests:
          #    cpu: 100m
          #    memory: 128Mi

      persistence:
        type: pvc
        enabled: true
        storageClassName: nfs-client
        accessModes:
          - 'ReadWriteOnce'
        size: 5Gi  
        annotations:
          nfs.io/storage-path: 'grafana'  
        finalizers:
        - kubernetes.io/pvc-protection

      initChownData:
        enabled: false
        image:
          registry: '{{ monitoring_container_repo }}'
          repository: 'busybox'
          tag: "1.31.1"
          sha: ""
          pullPolicy: IfNotPresent    
        resources: {}
          # limits:
          #   cpu: 100m
          #   memory: 128Mi
          # requests:
          #   cpu: 100m
          #   memory: 128Mi
        securityContext:
          runAsNonRoot: false
          runAsUser: 0
          seccompProfile:
            type: RuntimeDefault
          capabilities:
            add:
              - CHOWN              
                        
      sidecar:
        dashboards:
          enabled: true
        image:
          registry: '{{ monitoring_container_repo }}'
          repository: 'kiwigrid/k8s-sidecar'
          tag: 1.25.2            
        imagePullPolicy: IfNotPresent
        resources: {}
        # limits:
        #   cpu: 100m
        #   memory: 100Mi
        # requests:
        #   cpu: 50m
        #   memory: 50Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          seccompProfile:
            type: RuntimeDefault
      
      datasources:
        datasources.yaml:
          apiVersion: 1
          datasources:
           - name: 'Prometheus'
             type: 'prometheus'
             uid: 'prometheus'
             url: '{{ monitoring_prometheus_url }}'
             access: 'proxy'
             isDefault: true
             editable: true
             orgId: 1
             version: 1  

      imageRenderer:
        enabled: false
        image:   
          registry: '{{ monitoring_container_repo }}'         
          repository: 'grafana/grafana-image-renderer'            
          tag: "latest"                        
          pullPolicy: IfNotPresent  